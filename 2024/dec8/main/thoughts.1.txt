what is the best way to loop through antennas and frequencies 
- I think as I read the data, map each frequency to a list of coordinates for that frequency
  - then I need to get every possible combination of two coordinates from that list (order does not matter)
    - then calculate the possible antinodes (what happens if two antennas of the same frequency are in the same row/column?)
      - find the slope between the two antennas (starting from the point that is closest to the origin), then use that slope and find the lower antinodes
      - then use the slope and subtract it from the upper antenna to find the upper antinode
      - save the antinodes for each frequency in another map

A: {5,6}, {8,8} {9,9}
should be able to do this iteratively
- start at index 0, loop until length of array -2
- for each index, create a pair with every index after it
- can I do the calculation of the antinodes in this loop as well?
  - since we have the pair already, and we don't need to account for more than two at a time
  - should be able to calculate the slope, then check if the antinodes are in the map/have been found already

choices for two antennas
- {5,6}, {8,8}
- {5,6}, {9,9}
- {8,8}, {9,9}

permutations for 2 operands
- +,+
- +,*
- *,+
- *,*

permutations for 3 operands
- +,+,+
- +,+,*
- +,*,+
- +,*,*
- *,+,+
- *,+,*
- *,*,+
- *,*,*

maybe recursion makes sense

if one operand then we just return the list of options
recurse(1, [+,*]) 
- return [+,*]

if two operands, 
recurse(2, [+,*])
- loop through the list and the result of recurse, add 
    lists[][]
   
    // i is one of the operands
    for i in operands  
        // j is one of the permutations
        for j in recurse(count-1)
            lists += j+i
        
    return lists